/*! util.css v0.1.0 | https://github.com/ryanmorr/util.css */

/* ------------------------------------------------------------------ *\
    Layout
\* ------------------------------------------------------------------ */

/**
 * Allows a container element to stretch to accommodate the
 * floating elements consistently between browsers
 */

.clearfix::before,
.clearfix::after {
    content: " ";
    display: table;
}

.clearfix::after {
    clear: both;
}

/**
 * Float an element left
 */

.pull-left {
    float: left;
}

/**
 * Float an element right
 */

.pull-right {
    float: right;
}

/*
 * Sets a maximum width relative to the parent and auto scales
 * the height
 */

.responsive-width {
    box-sizing: border-box;
    max-width: 100%;
    height: auto;
}

/*
 * Sets a maximum height relative to the parent and auto scales
 * the width, only works if the parent element has a fixed height
 */

.responsive-height {
    box-sizing: border-box;
    max-height: 100%;
    width: auto;
}

/**
 * Don't include the padding and border as part of the width
 * and height of an element
 */

.border-box,
.border-box::before,
.border-box::after {
    box-sizing: border-box;
}

.border-box *,
.border-box *::before,
.border-box *::after {
    box-sizing: inherit;
}

/* ------------------------------------------------------------------ *\
    Flexbox
\* ------------------------------------------------------------------ */

/**
 * Block element that lays out its content according to flexbox
 */

.flex {
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
}

/**
 * Inline element that lays out its content according to flexbox
 */

.inline-flex {
    display: -webkit-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
}

/**
 * Place an item's cross-start margin edge on the cross-start line (top row)
 */

.flex-align-top {
    -ms-flex-align: start;
    -webkit-align-items: flex-start;
    align-items: flex-start;
}

/**
 * Items are centered in the cross-axis (middle row)
 */

.flex-align-middle {
    -ms-flex-align: center;
    -webkit-align-items: center;
    align-items: center;
}

/**
 * Place an item's cross-end margin edge on the cross-end line (bottom row)
 */

.flex-align-bottom {
    -ms-flex-align: end;
    -webkit-align-items: flex-end;
    align-items: flex-end;
}

/**
 * Pack items toward the start line (left col)
 */

.flex-align-left {
    -ms-flex-pack: start;
    -webkit-justify-content: flex-start;
    justify-content: flex-start;
}

/**
 * Items are centered along the line (center col)
 */

.flex-align-center {
    -ms-flex-pack: center;
    -webkit-justify-content: center;
    justify-content: center;
}

/**
 * Pack items toward the end line (right col)
 */

.flex-align-right {
    -ms-flex-pack: end;
    -webkit-justify-content: flex-end;
    justify-content: flex-end;
}

/**
 *  Items are evenly distributed in the line; first item is on the start line, last item on the end line
 */

.flex-align-justify {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
    justify-content: space-between;
}

/**
 * Items are evenly distributed in the line with equal space around them
 */

.flex-align-distribute {
    -ms-flex-pack: distribute;
    justify-content: space-around;
}

/**
 * Items are stacked horizontally, side-by-side
 */

.flex-row {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-direction: row;
    flex-direction: row;
}

/**
 * Items are stacked vertically, top-to-bottom
 */

.flex-col {
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
    flex-direction: column;
}

/* ------------------------------------------------------------------ *\
    Visibility
\* ------------------------------------------------------------------ */

/**
 * Shows an element
 */

.show {
    display: block !important;
}

/**
 * Hides an element visually and from screen readers and removes
 * its layout
 */

.hide {
    display: none !important;
}

/**
 * Hide an element visually and from screen readers, but
 * maintain layout
 */

.invisible {
    visibility: hidden !important;
}

/**
 * Hide an element visually, but still allow it to be accessible
 * to screen readers, maintain layout, and allow pointer events
 */

.transparent {
    opacity: 0 !important;
}

/**
 * Hide an element visually, but still allow it to be accessible
 * to screen readers
 */

.hidden-accessible {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}

/*
 * Extend the `hidden-accessible` class to allow the element
 * to be focusable when navigated to via the keyboard:
 * https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css
 */

.hidden-accessible.focusable:active,
.hidden-accessible.focusable:focus {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
}

/**
 * Hide an element visually, but maintain its layout offscreen so that
 * its width and height and still be accurately measured
 */

.hidden-measurable {
    position: absolute;
    top: 0;
    left: 0;
    -webkit-transform: translate(-100%, -100%);
    transform: translate(-100%, -100%);
}

/**
 * Responsive visibility based on device viewport
 */

.visible-extra-small,
.visible-small,
.visible-medium,
.visible-large {
    display: none !important;
}

/**
 * Show/hide content on extra small screens
 */

@media (max-width: 767px) {
    .hidden-extra-small {
        display: none !important;
    }

    .visible-extra-small {
        display: block !important;
    }
}

/**
 * Show/hide content on small screens
 */

@media (min-width: 768px) and (max-width: 991px) {
    .hidden-small {
        display: none !important;
    }

    .visible-small {
        display: block !important;
    }
}

/**
 * Show/hide content on medium-sized screens
 */

@media (min-width: 992px) and (max-width: 1199px) {
    .hidden-medium {
        display: none !important;
    }

    .visible-medium {
        display: block !important;
    }
}

/**
 * Show/hide content on large screens
 */

@media (min-width: 1200px) {
    .hidden-large {
        display: none !important;
    }

    .visible-large {
        display: block !important;
    }
}

/**
 * Show/hide content on high resolution devices
 */

.visible-high-res {
    display: none !important;
}

@media print, (min-resolution: 1.25dppx), (min-resolution: 120dpi) {
    .hidden-high-res {
        display: none !important;
    }

    .visible-high-res {
        display: block !important;
    }
}

/* ------------------------------------------------------------------ *\
    Positioning
\* ------------------------------------------------------------------ */

/**
 * Center an element horizontally (requires width)
 */

.center {
    display: block;
    float: none;
    margin-left: auto;
    margin-right: auto;
}

/**
 * Center an element vertically
 */

.middle {
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    transform: translateY(-50%);
}

/**
 * Center an element horizontally and vertically
 */

.middle-center {
    margin: 0 auto;
    display: table;
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    transform: translateY(-50%);
}

/**
 * Align an absolutely positioned element to the top-left
 * of its container
 */

.abs-top-left {
    position: absolute;
    top: 0;
    left: 0;
}

/**
 * Align an absolutely positioned element to the top-center
 * of its container (requires width)
 */

.abs-top-center {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    margin-left: auto;
    margin-right: auto;
}

/**
 * Align an absolutely positioned element to the top-right
 * of its container
 */

.abs-top-right {
    position: absolute;
    top: 0;
    right: 0;
}

/**
 * Align an absolutely positioned element to the middle-left
 * of its container (requires height)
 */

.abs-middle-left {
    position: absolute;
    bottom: 0;
    top: 0;
    left: 0;
    margin-top: auto;
    margin-bottom: auto;
}

/**
 * Align an absolutely positioned element to the middle-center
 * of its container (requires width & height)
 */

.abs-middle-center {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    margin: auto;
}

/**
 * Align an absolutely positioned element to the middle-right
 * of its container (requires height)
 */

.abs-middle-right {
    position: absolute;
    bottom: 0;
    top: 0;
    right: 0;
    margin-top: auto;
    margin-bottom: auto;
}

/**
 * Align an absolutely positioned element to the bottom-left
 * of its container
 */

.abs-bottom-left {
    position: absolute;
    bottom: 0;
    left: 0;
}

/**
 * Align an absolutely positioned element to the bottom-center
 * of its container (requires width)
 */

.abs-bottom-center {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    margin-left: auto;
    margin-right: auto;
}

/**
 * Align an absolutely positioned element to the bottom-right
 * of its container
 */

.abs-bottom-right {
    position: absolute;
    bottom: 0;
    right: 0;
}

/* ------------------------------------------------------------------ *\
    Text
\* ------------------------------------------------------------------ */

/**
 * Enable antialiasing for a smoother font
 */

.antialiased {
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    font-smoothing: antialiased;
}

/**
 * Enable font kerning for optimal spacing
 */

.kern {
    text-rendering: optimizeLegibility;
    font-feature-settings: "kern" 1;
    font-kerning: normal;
}

/**
 * Prevent text from wrapping and truncate with an ellipsis
 */

.text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

/**
 * Break strings when their length exceeds the width of their
 * container
 */

.text-break {
    word-wrap: break-word !important;
    overflow-wrap: break-word !important;
    -webkit-hyphens: auto;
    -ms-hyphens: auto;
    hyphens: auto;
}

/* ------------------------------------------------------------------ *\
    Images
\* ------------------------------------------------------------------ */

/**
 * Image replacement to provide a caption to an image that is only
 * available to web crawlers and screen readers
 */

.hide-text {
    text-indent: 100%;
    white-space: nowrap;
    overflow: hidden;
}

/**
 * Make an image responsive while maintaining aspect ratio
 */

.img-responsive {
    display: block;
    max-width: 100%;
    height: auto;
    object-fit: contain;
}

/* ------------------------------------------------------------------ *\
    Transitions
\* ------------------------------------------------------------------ */

/**
 * Allow an element to transition whenever a property changes
 */

.transition {
    -webkit-transition: all 0.3s ease-out;
    transition: all 0.3s ease-out;
}

/**
 * Provides a fade in/out effect to an element
 */

.fadable {
    opacity: 0;
    -webkit-transition: opacity 0.15s linear;
    transition: opacity 0.15s linear;
}

/**
 * Provides a collapse/expand effect to an element
 */

.collapsible {
    position: relative;
    height: 0;
    overflow: hidden;
    -webkit-transition-timing-function: ease;
    transition-timing-function: ease;
    -webkit-transition-duration: 0.35s;
    transition-duration: 0.35s;
    -webkit-transition-property: height, visibility;
    transition-property: height, visibility;
}

/**
 * Hack to create a new stacking context in order to invoke hardware
 * acceleration for smoother animations
 */

.accelerated {
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    -webkit-perspective: 1000;
    perspective: 1000;
}

/* ------------------------------------------------------------------ *\
    State
\* ------------------------------------------------------------------ */

/**
 * Indicate visually an element is disabled and prevent user
 * interaction
 */

.disabled,
:disabled,
[disabled],
[aria-disabled] {
    cursor: default;
    opacity: 0.7;
    pointer-events: none !important;
}

.disabled *,
:disabled *,
[disabled] *,
[aria-disabled] * {
    pointer-events: none !important;
}

/**
 * Indicate that an element is loading
 */

.loading,
[aria-busy="true"] {
    cursor: progress;
}

/**
 * Indicate that an element is a helpful resource
 */

.help,
abbr[title] {
    cursor: help;
}

/**
 * Indicate that an element is restricted from interaction
 */

.restricted {
    cursor: not-allowed;
}

/* ------------------------------------------------------------------ *\
    Interaction
\* ------------------------------------------------------------------ */

/**
 * Indicate that an element is actionable (clickable)
 */

.actionable,
[role="button"],
[aria-controls] {
    cursor: pointer;
    -ms-touch-action: manipulation;
    touch-action: manipulation;
}

/**
 * Add drag characteristics to an element
 */

.draggable,
[draggable="true"] {
    cursor: move;
    -ms-touch-action: none;
    touch-action: none;
    -webkit-user-drag: element;
    -moz-user-select: none;
    -webkit-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

/**
 * Prevent text selection
 */

.unselectable {
    cursor: default;
    -moz-user-select: none;
    -webkit-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

/**
 * Prevent user interaction
 */

.unclickable {
    pointer-events: none !important;
}

/**
 * Prevent the callout menu appearing in iOS Safari when the user performs tap & hold
 */

.prevent-callout {
    -webkit-touch-callout: none !important;
}

/**
 * Make an element resizable on both axes
 */

.resizable {
    overflow: auto;
    resize: both;
}

/**
 * Make an element vertically scrollable
 */

.scrollable-vertical {
    overflow-y: scroll;
    overflow-x: hidden;
    -webkit-overflow-scrolling: touch;
    resize: vertical;
}

/**
 * Make an element horizontally scrollable
 */

.scrollable-horizontal {
    width: 100%;
    overflow-y: hidden;
    overflow-x: auto;
    -ms-overflow-style: -ms-autohiding-scrollbar;
    -webkit-overflow-scrolling: touch;
}

/* ------------------------------------------------------------------ *\
    UI
\* ------------------------------------------------------------------ */

/**
 * All-purpose wrapper for UI elements
 */

.container {
    display: block;
    position: relative;
}

/**
 * Include clearfix for convenience
 */

.container::before,
.container::after {
    content: " ";
    display: table;
}

.container::after {
    clear: both;
}

/**
 * General overlay UI element
 */

.overlay {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    width: 100%;
    height: 100%;
}
